{"version":3,"sources":["components/Villager.js","components/villagerList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Villager","name","image_uri","species","className","alt","src","VillagerList","shuffled","data","sort","Math","random","slice","map","villager","key","id","SearchBox","searchChange","searchField","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","errorInfo","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","Object","values","filterAnimal","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"8PAceA,EAZE,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,QAChC,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAK,SAAUC,IAAKJ,IACzB,6BACI,4BAAKD,GACL,2BAAIE,MCWLI,EAhBM,SAAC,GAAW,IAEzBC,EAFwB,EAATC,KAECC,MAAK,iBAAM,GAAMC,KAAKC,YAE1C,OAAQ,6BAEAJ,EAASK,MAAM,EAAG,IAAIC,KAAI,SAAAC,GACtB,OAAQ,kBAAC,EAAD,CAAUC,IAAKD,EAASE,GACdd,QAASY,EAASZ,QAClBF,KAAMc,EAASd,KAAK,aACpBC,UAAaa,EAASb,iBCFzCgB,EATG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,aAA+B,EAAjBC,YAC9B,OAAQ,yBAAKhB,UAAU,OACX,2BAAOA,UAAU,mCACViB,KAAK,SAASC,YAAY,qBAC1BC,SAAUJ,MCGlBK,EAPA,SAACC,GACZ,OAAQ,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,UACpCH,EAAMI,WCmBRC,G,wDApBX,WAAYL,GAAQ,IAAD,8BACf,cAAOA,IACFM,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACH,wDAELG,KAAKV,MAAMI,a,GAhBCQ,cCsDZC,E,kDA/CX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKJ,SACD,CAAEhB,YAAaoB,EAAMC,OAAOC,SAdhC,EAAKX,MAAQ,CACTtB,KAAM,GACNW,YAAa,IAJP,E,gEAQO,IAAD,OAChBuB,MAAM,mCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAnC,GAAI,OAAI,EAAK2B,SAAS,CAAE3B,KAAMsC,OAAOC,OAAOvC,U,+BAShD,IAAD,EACuB0B,KAAKJ,MAA1BtB,EADF,EACEA,KAAMW,EADR,EACQA,YACP6B,EAAexC,EAAKyC,QAAO,SAAAnC,GAC7B,OAAOA,EAASd,KAAK,aAAakD,cAAcC,SAAShC,EAAY+B,kBAEzE,OAAK1C,EAAK4C,OASF,yBAAKjD,UAAU,MACX,wBAAIA,UAAU,MAAd,6BACA,kBAAC,EAAD,CAAWe,aAAgBgB,KAAKI,eAAgBnB,YAAeA,IAC/D,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAcX,KAAMwC,OAb5B,yBAAK7C,UAAU,MACf,wBAAIA,UAAU,MAAd,6BACA,wBAAIA,UAAU,MAAd,mB,GA7BFiC,aCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.474fd61c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Villager = ({name, image_uri, species}) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt={'vv_img'} src={image_uri}/>\n            <div>\n                <h3>{name}</h3>\n                <p>{species}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Villager;","import React from 'react';\nimport Villager from \"./Villager\";\n\nconst VillagerList = ({data}) =>{\n    // data is an object. Need to take its values first\n    let shuffled = data.sort(() => 0.5 - Math.random());\n\n    return (<div>\n        {\n            shuffled.slice(0, 18).map(villager =>{\n                return (<Villager key={villager.id}\n                                  species={villager.species}\n                                  name={villager.name[\"name-USen\"]}\n                                  image_uri = {villager.image_uri}/>)\n            })\n        }\n    </div>);\n}\n\nexport default VillagerList","import React from 'react';\n\nconst SearchBox = ({searchChange, searchField}) => {\n    return (<div className='pa2'>\n                <input className='pa3 ba b--green bg-lightest-blue'\n                       type=\"search\" placeholder=\"Search Characters!\"\n                       onChange={searchChange}\n                />\n            </div>)\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n    return (<div style={{overflowY: 'scroll', height:'700px'}}>\n                {props.children}\n            </div>\n            )\n};\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super (props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError){\n            return (<h1>Ooops. This is not good.</h1>)\n        }\n        return this.props.children;\n    }\n\n}\n\nexport default ErrorBoundry","import React, {Component} from 'react';\nimport VillagerList from \"../components/villagerList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport './App.css';\nimport ErrorBoundry from \"../components/ErrorBoundry\";\n\n\nclass App extends Component {\n    constructor() {\n        super ();\n        this.state = {\n            data: [],\n            searchField: ''\n        }\n    };\n    \n    componentDidMount() {\n        fetch('http://acnhapi.com/v1/villagers')\n            .then(response => response.json())\n            .then(data => this.setState({ data: Object.values(data) }))\n    };\n    \n    onSearchChange = (event) =>{\n        this.setState(\n            { searchField: event.target.value }\n        );\n    }\n\n    render() {\n        const {data, searchField} = this.state\n        const filterAnimal = data.filter(villager =>{\n            return villager.name[\"name-USen\"].toLowerCase().includes(searchField.toLowerCase())\n        })\n        if (!data.length){\n            return (<div className='tc'>\n                    <h1 className='f1'>Animal Crossing Villagers</h1>\n                    <h2 className='f2'>Loading...</h2>\n                    </div>\n                )\n        }\n        else{\n            return  (\n                <div className='tc'>\n                    <h1 className='f1'>Animal Crossing Villagers</h1>\n                    <SearchBox searchChange = {this.onSearchChange} searchField = {searchField}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <VillagerList data={filterAnimal}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>)\n        }\n    }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons'\nimport App from \"./containers/App\";\nimport ErrorBoundry from \"./components/ErrorBoundry\";\nimport * as serviceWorker from './serviceWorker';\n\n\n// Animal_crossing\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}