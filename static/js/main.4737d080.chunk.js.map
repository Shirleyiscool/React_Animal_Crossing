{"version":3,"sources":["components/Villager.js","components/villagerList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Villager","name","image_uri","species","className","alt","src","VillagerList","shuffled","data","sort","Math","random","slice","map","villager","key","id","SearchBox","searchChange","searchField","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","errorInfo","this","setState","Component","App","onRequestAPI","onSearchChange","isPending","filterAnimal","filter","toLowerCase","includes","connect","searchVillagers","requestVillagers","dispatch","event","payload","target","value","fetch","then","response","json","Object","values","catch","initialStateSearch","initialStateAPI","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.4737d080.chunk.js","sourcesContent":["import React from 'react';\n\nconst Villager = ({name, image_uri, species}) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt={'vv_img'} src={image_uri}/>\n            <div>\n                <h3>{name}</h3>\n                <p>{species}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Villager;","import React from 'react';\nimport Villager from \"./Villager\";\n\nconst VillagerList = ({data}) =>{\n    // data is an object. Need to take its values first\n    let shuffled = data.sort(() => 0.5 - Math.random());\n\n    return (<div>\n        {\n            shuffled.slice(0, 18).map(villager =>{\n                return (<Villager key={villager.id}\n                                  species={villager.species}\n                                  name={villager.name[\"name-USen\"]}\n                                  image_uri = {villager.image_uri}/>)\n            })\n        }\n    </div>);\n}\n\nexport default VillagerList","import React from 'react';\n\nconst SearchBox = ({searchChange, searchField}) => {\n    return (<div className='pa2'>\n                <input className='pa3 ba b--green bg-lightest-blue'\n                       type=\"search\" placeholder=\"Search Characters!\"\n                       onChange={searchChange}\n                />\n            </div>)\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n    return (<div style={{overflowY: 'scroll', height:'700px'}}>\n                {props.children}\n            </div>\n            )\n};\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super (props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError){\n            return (<h1>Ooops. This is not good.</h1>)\n        }\n        return this.props.children;\n    }\n\n}\n\nexport default ErrorBoundry","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport VillagerList from \"../components/villagerList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport './App.css';\nimport ErrorBoundry from \"../components/ErrorBoundry\";\n\nimport {setSearchField, requestAPI} from \"../actions\";\n\n\nconst mapStateToProps = state =>{\n    return {\n        searchField: state.searchVillagers.searchField,\n        data: state.requestVillagers.data,\n        isPending: state.requestVillagers.isPending,\n        error: state.requestVillagers.error\n    }\n};\n\nconst mapDispatchToProps = dispatch =>{\n    return {\n        onSearchChange : event => dispatch(setSearchField(event.target.value)),\n        onRequestAPI : () => dispatch(requestAPI())\n    }\n\n}\n\nclass App extends Component {\n    \n    componentDidMount() {\n        this.props.onRequestAPI()\n    };\n\n    render() {\n        const {searchField, onSearchChange, data, isPending} = this.props;\n        const filterAnimal = data.filter(villager =>{\n            return villager.name[\"name-USen\"].toLowerCase().includes(searchField.toLowerCase())\n        })\n        if (isPending){\n            return (<div className='tc'>\n                    <h1 className='f1'>Animal Crossing Villagers</h1>\n                    <h2 className='f2'>Loading...</h2>\n                    </div>\n                )\n        }\n        else{\n            return  (\n                <div className='tc'>\n                    <h1 className='f1'>Animal Crossing Villagers</h1>\n                    <SearchBox searchChange = {onSearchChange} searchField = {searchField}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <VillagerList data={filterAnimal}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>)\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD, REQUEST_API_PENDING,\n    REQUEST_API_SUCCESS, REQUEST_API_FAILED} from './constants'\n\nexport const setSearchField = (text) =>(\n    {\n        type:CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n);\n\nexport const requestAPI = () => (dispatch) => {\n    dispatch({type: REQUEST_API_PENDING});\n    fetch('http://acnhapi.com/v1/villagers')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_API_SUCCESS, payload: Object.values(data) }))\n        .catch(error => dispatch({type: REQUEST_API_FAILED, payload: error}))\n\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_API_PENDING = 'REQUEST_API_PENDING';\nexport const REQUEST_API_SUCCESS = 'REQUEST_API_SUCCESS';\nexport const REQUEST_API_FAILED = 'REQUEST_API_FAILED';\n\n","import {CHANGE_SEARCH_FIELD, REQUEST_API_PENDING,\n    REQUEST_API_SUCCESS, REQUEST_API_FAILED} from './constants'\n\nconst initialStateSearch = {\n    searchField : ''\n};\n\nexport const searchVillagers = (state=initialStateSearch, action={}) =>{\n    switch (action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({},state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialStateAPI = {\n    isPending: false,\n    data: [],\n    error: ''\n}\n\nexport const requestVillagers = (state = initialStateAPI, action={}) =>{\n    switch (action.type){\n        case REQUEST_API_PENDING:\n            return Object.assign({}, state, {isPending: true});\n        case REQUEST_API_SUCCESS:\n            return Object.assign({}, state, {data: action.payload, isPending: false});\n        case REQUEST_API_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false});\n        default:\n            return state;\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger} from \"redux-logger/src\";\nimport thunkMiddleware from \"redux-thunk\";\nimport './index.css';\nimport 'tachyons'\nimport App from \"./containers/App\";\nimport {searchVillagers, requestVillagers} from \"./reducers\";\n\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchVillagers, requestVillagers})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}